name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 45 # 设置任务超时为 45 分钟
    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整的git历史

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        registry-url: 'https://registry.npmjs.org'

    # 暂时注释掉其他步骤，只测试AI代码走读
    # - name: Install Yarn
    #   run: npm install -g yarn # 确保 Yarn 可用

    # - name: Install dependencies
    #   run: |
    #     yarn config set network-timeout 300000
    #     yarn install --network-timeout 300000

    # - name: Run linting
    #   run: yarn lint # 假设 package.json 中 script 名为 lint

    # - name: TypeScript type check
    #   run: yarn tsc --noEmit # 使用 Yarn 调用 tsc

    - name: AI Code Review
      timeout-minutes: 10  # 设置AI代码走读超时为5分钟
      run: |
        # 获取当前分支与main分支的差异文件
        echo "🤖 开始AI代码审查..."
        
        # 创建临时目录存储审查结果
        mkdir -p /tmp/code-review
        
        # 获取变更的文件列表
        if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
          # PR事件：比较目标分支
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          git fetch origin "$BASE_BRANCH"
          CHANGED_FILES=$(git diff --name-only --diff-filter=AMR origin/"$BASE_BRANCH"...HEAD | grep -E '\.(js|ts|jsx|tsx)$' || true)
        else
          # Push事件：比较上一次提交
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            CHANGED_FILES=$(git diff --name-only --diff-filter=AMR HEAD~1..HEAD | grep -E '\.(js|ts|jsx|tsx)$' || true)
          else
            # 首次提交，获取所有文件
            CHANGED_FILES=$(git ls-files | grep -E '\.(js|ts|jsx|tsx)$' || true)
          fi
        fi
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "📝 没有发现需要审查的代码文件"
          exit 0
        fi
        
        echo "📋 发现以下文件需要审查："
        echo "$CHANGED_FILES"
        
        # 逐个文件进行代码审查
        for file in $CHANGED_FILES; do
          if [ -f "$file" ]; then
            echo "🔍 正在审查文件: $file"
            
            # 获取文件差异内容
            if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
              DIFF_CONTENT=$(git diff origin/"$BASE_BRANCH"...HEAD -- "$file" || true)
            else
              if git rev-parse HEAD~1 >/dev/null 2>&1; then
                DIFF_CONTENT=$(git diff HEAD~1..HEAD -- "$file" || true)
              else
                # 首次提交，显示整个文件内容
                DIFF_CONTENT=$(cat "$file" || true)
              fi
            fi
            
            if [ ! -z "$DIFF_CONTENT" ]; then
              # 检查是否只是注释变更
              COMMENT_ONLY_CHANGE=$(echo "$DIFF_CONTENT" | grep -E '^[+\-]' | grep -v -E '^[+\-].*//.*[^/]' | grep -v -E '^[+\-].*\*.*[^*]' | wc -l | tr -d ' ')
              TOTAL_CHANGES=$(echo "$DIFF_CONTENT" | grep -E '^[+\-]' | wc -l | tr -d ' ')
              
              # 获取文件的完整内容作为上下文
              FULL_CONTENT=$(cat "$file" 2>/dev/null || echo "无法读取文件内容")
              
              # 根据变更类型构造不同的审查请求
              if [ "$COMMENT_ONLY_CHANGE" -eq 0 ] && [ "$TOTAL_CHANGES" -le 3 ]; then
                # 仅注释变更的简化请求
                REQUEST_BODY=$(jq -n --arg content "请简要审查以下注释变更：

        📁 文件: $file

        🔄 变更内容:
        \`\`\`diff
        $DIFF_CONTENT
        \`\`\`

        这似乎是注释相关的变更，请简要确认注释内容是否合适。" '{"messages": [{"role": "user", "content": $content}]}')
              else
                # 完整的代码审查请求
                REQUEST_BODY=$(jq -n --arg content "请审查以下代码变更：

        📁 文件路径: $file

        🔄 变更内容 (diff):
        \`\`\`diff
        $DIFF_CONTENT
        \`\`\`

        📋 完整文件内容 (用于上下文参考):
        \`\`\`typescript
        $FULL_CONTENT
        \`\`\`

        请重点关注变更的部分，并结合完整代码上下文进行审查。" '{"messages": [{"role": "user", "content": $content}]}')
              fi
              
              # 调用AI代码审查API
              RESPONSE=$(curl -s -X POST \
                -H "Content-Type: application/json" \
                -d "$REQUEST_BODY" \
                "https://ai-codereview-agent.liuweiyuan0713.workers.dev/api/agents/codeReviewAgent/generate" \
                2>/dev/null || echo '{"text": "API调用失败"}')
              
              # 解析响应并保存结果
              REVIEW_TEXT=$(echo "$RESPONSE" | jq -r '.text // "无法获取审查结果"')
              
              # 保存审查结果到文件
              {
                echo "## 📄 文件: $file"
                echo ""
                echo "$REVIEW_TEXT"
                echo ""
                echo "---"
                echo ""
              } >> /tmp/code-review/review-${{ github.run_id }}.md
              
              echo "✅ 完成审查: $file"
            fi
          fi
        done
        
        echo "🎉 AI代码审查完成！"
        
        # 输出审查结果摘要
        if [ -f "/tmp/code-review/review-${{ github.run_id }}.md" ]; then
          echo "📊 代码审查报告："
          head -50 /tmp/code-review/review-${{ github.run_id }}.md
        fi

    # 暂时注释掉其他测试步骤，只测试AI代码走读
    # - name: Run unit tests
    #   run: yarn test:unit # 假设 package.json 中 script 名为 test:unit

    # - name: Start development server
    #   run: |
    #     yarn client:server &
    #     sleep 30 # 保持原逻辑，启动开发服务器并等待

    # - name: Run e2e tests
    #   run: yarn test:e2e # 假设 package.json 中 script 名为 test:e2e

    # - name: Upload test coverage
    #   uses: codecov/codecov-action@v4
    #   with:
    #     directory: ./docs/jest-coverage
    #     fail_ci_if_error: true
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # 暂时注释掉build和deploy，只测试AI代码走读
  # build:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30 # 设置任务超时为 30 分钟
  #   needs: test
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Use Node.js 20.x
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 20.x
  #       cache: 'yarn'
  #       registry-url: 'https://registry.npmjs.org'

  #   - name: Install Yarn
  #     run: npm install -g yarn # 确保 Yarn 可用

  #   - name: Install dependencies
  #     run: |
  #       yarn config set network-timeout 300000
  #       yarn install --frozen-lockfile --network-timeout 300000

  #   - name: Build production
  #     run: yarn client:prod # 假设 package.json 中 script 名为 client:prod

  #   - name: Upload build artifacts
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: dist
  #       path: dist/

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: dist
  #       path: dist/

  #   - name: Deploy to Cloudflare Pages
  #     uses: cloudflare/wrangler-action@v3
  #     with:
  #       apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  #       accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  #       command: pages deploy dist --project-name=${{ secrets.CLOUDFLARE_PROJECT_NAME }}