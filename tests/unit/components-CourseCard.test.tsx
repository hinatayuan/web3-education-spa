import React from 'react';
import { render, screen, fireEvent, cleanup } from '@testing-library/react';
import '@testing-library/jest-dom';
import { CourseCard } from '../../src/components/CourseCard';
import type { Course } from '../../src/types';

// Mock all the hooks
jest.mock('wagmi', () => ({
  useAccount: jest.fn(),
}));

jest.mock('viem', () => ({
  formatEther: jest.fn((value) => '1.0'),
}));

jest.mock('../../src/hooks/useContracts', () => ({
  useHasUserPurchasedCourse: jest.fn(),
  useTokenAllowance: jest.fn(),
  useTokenBalance: jest.fn(),
  useYDTokenContract: jest.fn(),
  useCourseManagerContract: jest.fn(),
}));

jest.mock('../../src/hooks/useUserData', () => ({
  useUserData: jest.fn(),
}));

jest.mock('../../src/config/contract', () => ({
  COURSE_MANAGER_CONTRACT_ADDRESS: '0xcontract123',
}));

import { useAccount } from 'wagmi';
import { formatEther } from 'viem';
import {
  useHasUserPurchasedCourse,
  useTokenAllowance,
  useTokenBalance,
  useYDTokenContract,
  useCourseManagerContract,
} from '../../src/hooks/useContracts';
import { useUserData } from '../../src/hooks/useUserData';

const mockUseAccount = useAccount as jest.MockedFunction<typeof useAccount>;
const mockFormatEther = formatEther as jest.MockedFunction<typeof formatEther>;
const mockUseHasUserPurchasedCourse = useHasUserPurchasedCourse as jest.MockedFunction<typeof useHasUserPurchasedCourse>;
const mockUseTokenAllowance = useTokenAllowance as jest.MockedFunction<typeof useTokenAllowance>;
const mockUseTokenBalance = useTokenBalance as jest.MockedFunction<typeof useTokenBalance>;
const mockUseYDTokenContract = useYDTokenContract as jest.MockedFunction<typeof useYDTokenContract>;
const mockUseCourseManagerContract = useCourseManagerContract as jest.MockedFunction<typeof useCourseManagerContract>;
const mockUseUserData = useUserData as jest.MockedFunction<typeof useUserData>;

afterEach(cleanup);

describe('CourseCardÁªÑ‰ª∂ÊµãËØï', () => {
  const mockCourse: Course = {
    courseId: 'course-123',
    title: 'ÊµãËØïËØæÁ®ã',
    description: 'ËøôÊòØ‰∏Ä‰∏™ÊµãËØïËØæÁ®ãÁöÑÊèèËø∞',
    price: BigInt('1000000000000000000'), // 1 ETH in wei
    creator: '0x1234567890123456789012345678901234567890',
    isActive: true,
    createdAt: BigInt('1634567890')
  };

  beforeEach(() => {
    jest.clearAllMocks();

    // Default mock implementations
    mockUseAccount.mockReturnValue({
      address: undefined,
    } as any);

    mockFormatEther.mockReturnValue('1.0');

    mockUseHasUserPurchasedCourse.mockReturnValue({
      hasPurchased: false,
      refetchPurchaseStatus: jest.fn(),
    } as any);

    mockUseTokenAllowance.mockReturnValue({
      allowance: BigInt('0'),
      refetchAllowance: jest.fn(),
    } as any);

    mockUseTokenBalance.mockReturnValue({
      refetchBalance: jest.fn(),
    } as any);

    mockUseYDTokenContract.mockReturnValue({
      approve: jest.fn(),
      isPending: false,
      isConfirming: false,
      isConfirmed: false,
    } as any);

    mockUseCourseManagerContract.mockReturnValue({
      purchaseCourse: jest.fn(),
      isPending: false,
      isConfirming: false,
      isConfirmed: false,
    } as any);

    mockUseUserData.mockReturnValue({
      addPurchasedCourse: jest.fn(),
    } as any);
  });

  describe('Âü∫Êú¨Ê∏≤ÊüìÊµãËØï', () => {
    it('Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìËØæÁ®ã‰ø°ÊÅØ', () => {
      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('ÊµãËØïËØæÁ®ã')).toBeInTheDocument();
      expect(screen.getByText('ËøôÊòØ‰∏Ä‰∏™ÊµãËØïËØæÁ®ãÁöÑÊèèËø∞')).toBeInTheDocument();
      expect(screen.getByText('1.0 YD')).toBeInTheDocument();
      expect(screen.getByText(/ÂàõÂª∫ËÄÖ:/)).toBeInTheDocument();
      expect(screen.getByText(/0x1234...7890/)).toBeInTheDocument();
      expect(screen.getByText('Áä∂ÊÄÅ: ÂèØË¥≠‰π∞')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫ÊöÇÂÅúÈîÄÂîÆÁä∂ÊÄÅ', () => {
      const inactiveCourse = { ...mockCourse, isActive: false };
      render(<CourseCard course={inactiveCourse} />);

      expect(screen.getByText('Áä∂ÊÄÅ: ÊöÇÂÅúÈîÄÂîÆ')).toBeInTheDocument();
    });

    it('Â∫îËØ•Ë∞ÉÁî®formatEtherÊù•Ê†ºÂºèÂåñ‰ª∑Ê†º', () => {
      render(<CourseCard course={mockCourse} />);

      expect(mockFormatEther).toHaveBeenCalledWith(mockCourse.price);
    });
  });

  describe('Êú™ËøûÊé•Èí±ÂåÖÁä∂ÊÄÅÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫ËøûÊé•Èí±ÂåÖÊèêÁ§∫', () => {
      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('ËØ∑ÂÖàËøûÊé•Èí±ÂåÖ')).toBeInTheDocument();
    });
  });

  describe('ËØæÁ®ãÂàõÂª∫ËÄÖÁä∂ÊÄÅÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÂàõÂª∫ËÄÖÊ†áËØÜ', () => {
      mockUseAccount.mockReturnValue({
        address: mockCourse.creator,
      } as any);

      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('üëë ÊàëÁöÑËØæÁ®ã')).toBeInTheDocument();
    });

    it('Â∫îËØ•Â§ÑÁêÜÂ§ßÂ∞èÂÜô‰∏çÊïèÊÑüÁöÑÂú∞ÂùÄÊØîËæÉ', () => {
      mockUseAccount.mockReturnValue({
        address: mockCourse.creator.toUpperCase(),
      } as any);

      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('üëë ÊàëÁöÑËØæÁ®ã')).toBeInTheDocument();
    });
  });

  describe('Â∑≤Ë¥≠‰π∞Áä∂ÊÄÅÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫Â∑≤Ë¥≠‰π∞Ê†áËØÜ', () => {
      mockUseAccount.mockReturnValue({
        address: '0x9876543210987654321098765432109876543210',
      } as any);

      mockUseHasUserPurchasedCourse.mockReturnValue({
        hasPurchased: true,
        refetchPurchaseStatus: jest.fn(),
      } as any);

      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('‚úì Â∑≤Ë¥≠‰π∞')).toBeInTheDocument();
    });
  });

  describe('ËØæÁ®ãÊöÇÂÅúÈîÄÂîÆÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÊöÇÂÅúÈîÄÂîÆ‰ø°ÊÅØ', () => {
      const inactiveCourse = { ...mockCourse, isActive: false };
      
      mockUseAccount.mockReturnValue({
        address: '0x9876543210987654321098765432109876543210',
      } as any);

      render(<CourseCard course={inactiveCourse} />);

      expect(screen.getByText('ÊöÇÂÅúÈîÄÂîÆ')).toBeInTheDocument();
    });
  });

  describe('ÊéàÊùÉÊµÅÁ®ãÊµãËØï', () => {
    beforeEach(() => {
      mockUseAccount.mockReturnValue({
        address: '0x9876543210987654321098765432109876543210',
      } as any);

      mockUseHasUserPurchasedCourse.mockReturnValue({
        hasPurchased: false,
        refetchPurchaseStatus: jest.fn(),
      } as any);
    });

    it('Â∫îËØ•ÊòæÁ§∫ApproveÊåâÈíÆÂΩìÈúÄË¶ÅÊéàÊùÉÊó∂', () => {
      mockUseTokenAllowance.mockReturnValue({
        allowance: BigInt('0'), // ÊéàÊùÉÈ¢ùÂ∫¶‰∏çË∂≥
        refetchAllowance: jest.fn(),
      } as any);

      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('Approve')).toBeInTheDocument();
      expect(screen.getByText('ÈúÄË¶ÅÂÖàÊéàÊùÉÊâçËÉΩË¥≠‰π∞')).toBeInTheDocument();
    });

    it('Â∫îËØ•Ë∞ÉÁî®approveÂáΩÊï∞ÂΩìÁÇπÂáªApproveÊåâÈíÆ', () => {
      const mockApprove = jest.fn();
      
      mockUseTokenAllowance.mockReturnValue({
        allowance: BigInt('0'),
        refetchAllowance: jest.fn(),
      } as any);

      mockUseYDTokenContract.mockReturnValue({
        approve: mockApprove,
        isPending: false,
        isConfirming: false,
        isConfirmed: false,
      } as any);

      render(<CourseCard course={mockCourse} />);

      const approveButton = screen.getByText('Approve');
      fireEvent.click(approveButton);

      expect(mockApprove).toHaveBeenCalledWith('0xcontract123', mockCourse.price);
    });

    it('Â∫îËØ•ÊòæÁ§∫loadingÁä∂ÊÄÅÂΩìÊéàÊùÉËøõË°å‰∏≠', () => {
      mockUseTokenAllowance.mockReturnValue({
        allowance: BigInt('0'),
        refetchAllowance: jest.fn(),
      } as any);

      mockUseYDTokenContract.mockReturnValue({
        approve: jest.fn(),
        isPending: true,
        isConfirming: false,
        isConfirmed: false,
      } as any);

      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('Approving...')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫Á°ÆËÆ§Áä∂ÊÄÅ', () => {
      mockUseTokenAllowance.mockReturnValue({
        allowance: BigInt('0'),
        refetchAllowance: jest.fn(),
      } as any);

      mockUseYDTokenContract.mockReturnValue({
        approve: jest.fn(),
        isPending: false,
        isConfirming: true,
        isConfirmed: false,
      } as any);

      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('Á°ÆËÆ§‰∏≠...')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫Â∑≤Á°ÆËÆ§Áä∂ÊÄÅ', () => {
      mockUseTokenAllowance.mockReturnValue({
        allowance: BigInt('0'),
        refetchAllowance: jest.fn(),
      } as any);

      mockUseYDTokenContract.mockReturnValue({
        approve: jest.fn(),
        isPending: false,
        isConfirming: false,
        isConfirmed: true,
      } as any);

      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('Approved!')).toBeInTheDocument();
    });
  });

  describe('Ë¥≠‰π∞ÊµÅÁ®ãÊµãËØï', () => {
    beforeEach(() => {
      mockUseAccount.mockReturnValue({
        address: '0x9876543210987654321098765432109876543210',
      } as any);

      mockUseHasUserPurchasedCourse.mockReturnValue({
        hasPurchased: false,
        refetchPurchaseStatus: jest.fn(),
      } as any);

      // ËÆæÁΩÆË∂≥Â§üÁöÑÊéàÊùÉÈ¢ùÂ∫¶
      mockUseTokenAllowance.mockReturnValue({
        allowance: BigInt('2000000000000000000'), // 2 ETH worth
        refetchAllowance: jest.fn(),
      } as any);
    });

    it('Â∫îËØ•ÊòæÁ§∫Ë¥≠‰π∞ÊåâÈíÆÂΩìÂ∑≤ÊéàÊùÉ‰∏îÊú™Ë¥≠‰π∞', () => {
      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('Ë¥≠‰π∞ËØæÁ®ã')).toBeInTheDocument();
    });

    it('Â∫îËØ•Ë∞ÉÁî®purchaseCourseÂáΩÊï∞ÂΩìÁÇπÂáªË¥≠‰π∞ÊåâÈíÆ', () => {
      const mockPurchaseCourse = jest.fn();
      
      mockUseCourseManagerContract.mockReturnValue({
        purchaseCourse: mockPurchaseCourse,
        isPending: false,
        isConfirming: false,
        isConfirmed: false,
      } as any);

      render(<CourseCard course={mockCourse} />);

      const purchaseButton = screen.getByText('Ë¥≠‰π∞ËØæÁ®ã');
      fireEvent.click(purchaseButton);

      expect(mockPurchaseCourse).toHaveBeenCalledWith(mockCourse.courseId);
    });

    it('Â∫îËØ•ÊòæÁ§∫Ë¥≠‰π∞loadingÁä∂ÊÄÅ', () => {
      mockUseCourseManagerContract.mockReturnValue({
        purchaseCourse: jest.fn(),
        isPending: true,
        isConfirming: false,
        isConfirmed: false,
      } as any);

      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('Ë¥≠‰π∞‰∏≠...')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫Ë¥≠‰π∞Á°ÆËÆ§Áä∂ÊÄÅ', () => {
      mockUseCourseManagerContract.mockReturnValue({
        purchaseCourse: jest.fn(),
        isPending: false,
        isConfirming: true,
        isConfirmed: false,
      } as any);

      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('Á°ÆËÆ§Ë¥≠‰π∞‰∏≠...')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫Ë¥≠‰π∞ÊàêÂäüÁä∂ÊÄÅ', () => {
      mockUseCourseManagerContract.mockReturnValue({
        purchaseCourse: jest.fn(),
        isPending: false,
        isConfirming: false,
        isConfirmed: true,
      } as any);

      render(<CourseCard course={mockCourse} />);

      expect(screen.getByText('Ë¥≠‰π∞ÊàêÂäü!')).toBeInTheDocument();
    });
  });

  describe('ÊåâÈíÆÁ¶ÅÁî®Áä∂ÊÄÅÊµãËØï', () => {
    beforeEach(() => {
      mockUseAccount.mockReturnValue({
        address: '0x9876543210987654321098765432109876543210',
      } as any);

      mockUseHasUserPurchasedCourse.mockReturnValue({
        hasPurchased: false,
        refetchPurchaseStatus: jest.fn(),
      } as any);
    });

    it('ApproveÊåâÈíÆÂ∫îËØ•Âú®pendingÊó∂Ë¢´Á¶ÅÁî®', () => {
      mockUseTokenAllowance.mockReturnValue({
        allowance: BigInt('0'),
        refetchAllowance: jest.fn(),
      } as any);

      mockUseYDTokenContract.mockReturnValue({
        approve: jest.fn(),
        isPending: true,
        isConfirming: false,
        isConfirmed: false,
      } as any);

      render(<CourseCard course={mockCourse} />);

      const approveButton = screen.getByText('Approving...');
      expect(approveButton).toBeDisabled();
    });

    it('Ë¥≠‰π∞ÊåâÈíÆÂ∫îËØ•Âú®pendingÊó∂Ë¢´Á¶ÅÁî®', () => {
      mockUseTokenAllowance.mockReturnValue({
        allowance: BigInt('2000000000000000000'),
        refetchAllowance: jest.fn(),
      } as any);

      mockUseCourseManagerContract.mockReturnValue({
        purchaseCourse: jest.fn(),
        isPending: true,
        isConfirming: false,
        isConfirmed: false,
      } as any);

      render(<CourseCard course={mockCourse} />);

      const purchaseButton = screen.getByText('Ë¥≠‰π∞‰∏≠...');
      expect(purchaseButton).toBeDisabled();
    });
  });

  describe('ËæπÁïåÊÉÖÂÜµÊµãËØï', () => {
    it('Â∫îËØ•Â§ÑÁêÜÂàõÂª∫ËÄÖË¥≠‰π∞Ëá™Â∑±ÁöÑËØæÁ®ã', () => {
      mockUseAccount.mockReturnValue({
        address: mockCourse.creator,
      } as any);

      const mockApprove = jest.fn();
      const mockPurchaseCourse = jest.fn();

      mockUseYDTokenContract.mockReturnValue({
        approve: mockApprove,
        isPending: false,
        isConfirming: false,
        isConfirmed: false,
      } as any);

      mockUseCourseManagerContract.mockReturnValue({
        purchaseCourse: mockPurchaseCourse,
        isPending: false,
        isConfirming: false,
        isConfirmed: false,
      } as any);

      render(<CourseCard course={mockCourse} />);

      // ÂàõÂª∫ËÄÖ‰∏çÂ∫îËØ•ËÉΩÂ§üË¥≠‰π∞Ëá™Â∑±ÁöÑËØæÁ®ã
      expect(screen.queryByText('Approve')).not.toBeInTheDocument();
      expect(screen.queryByText('Ë¥≠‰π∞ËØæÁ®ã')).not.toBeInTheDocument();
      expect(screen.getByText('üëë ÊàëÁöÑËØæÁ®ã')).toBeInTheDocument();
    });

    it('Â∫îËØ•Â§ÑÁêÜÂ∑≤Ë¥≠‰π∞Áî®Êà∑', () => {
      mockUseAccount.mockReturnValue({
        address: '0x9876543210987654321098765432109876543210',
      } as any);

      mockUseHasUserPurchasedCourse.mockReturnValue({
        hasPurchased: true,
        refetchPurchaseStatus: jest.fn(),
      } as any);

      const mockApprove = jest.fn();
      const mockPurchaseCourse = jest.fn();

      render(<CourseCard course={mockCourse} />);

      // Â∑≤Ë¥≠‰π∞Áî®Êà∑‰∏çÂ∫îËØ•ÁúãÂà∞Ë¥≠‰π∞Áõ∏ÂÖ≥ÊåâÈíÆ
      expect(screen.queryByText('Approve')).not.toBeInTheDocument();
      expect(screen.queryByText('Ë¥≠‰π∞ËØæÁ®ã')).not.toBeInTheDocument();
      expect(screen.getByText('‚úì Â∑≤Ë¥≠‰π∞')).toBeInTheDocument();
    });

    it('Â∫îËØ•Â§ÑÁêÜ‰ª∑Ê†º‰∏∫0ÁöÑËØæÁ®ã', () => {
      const freeCourse = { ...mockCourse, price: BigInt('0') };
      
      mockFormatEther.mockReturnValue('0.0');

      render(<CourseCard course={freeCourse} />);

      expect(screen.getByText('0.0 YD')).toBeInTheDocument();
    });

    it('Â∫îËØ•Â§ÑÁêÜÈùûÂ∏∏ÈïøÁöÑËØæÁ®ãÊ†áÈ¢òÂíåÊèèËø∞', () => {
      const longCourse = {
        ...mockCourse,
        title: 'ËøôÊòØ‰∏Ä‰∏™ÈùûÂ∏∏ÈïøÁöÑËØæÁ®ãÊ†áÈ¢ò'.repeat(10),
        description: 'ËøôÊòØ‰∏Ä‰∏™ÈùûÂ∏∏ÈïøÁöÑËØæÁ®ãÊèèËø∞'.repeat(20),
      };

      render(<CourseCard course={longCourse} />);

      expect(screen.getByText(longCourse.title)).toBeInTheDocument();
      expect(screen.getByText(longCourse.description)).toBeInTheDocument();
    });
  });
});