/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common"
  

  export interface CourseManagerInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ETH_RESERVE" | "DEFAULT_TOKEN_RESERVE" | "EXCHANGE_RATE" | "FEE_RATE" | "addETHReserve" | "addTokenReserve" | "buyTokens" | "calculateETHForTokens" | "calculateTokensForETH" | "courseIds" | "courses" | "createCourse" | "creatorEarnings" | "ethReserve" | "getAllCourseIds" | "getContractBalances" | "getCourse" | "getCreatorEarnings" | "getExchangeReserves" | "getUserPurchasedCourses" | "hasUserPurchasedCourse" | "initializeTokenReserve" | "mintTokenReserve" | "owner" | "purchaseCourse" | "renounceOwnership" | "sellTokens" | "setTokenReserve" | "toggleCourseStatus" | "tokenReserve" | "transferOwnership" | "updateCourse" | "userCoursePurchases" | "withdrawETH" | "withdrawFees" | "ydToken"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CourseCreated" | "CoursePurchased" | "CourseUpdated" | "CreatorEarningsWithdrawn" | "ETHReserveAdded" | "FeeCollected" | "OwnershipTransferred" | "ReservesInitialized" | "TokenReserveAdded" | "TokensPurchased" | "TokensSold"): EventFragment;

    encodeFunctionData(functionFragment: 'DEFAULT_ETH_RESERVE', values?: undefined): string;
encodeFunctionData(functionFragment: 'DEFAULT_TOKEN_RESERVE', values?: undefined): string;
encodeFunctionData(functionFragment: 'EXCHANGE_RATE', values?: undefined): string;
encodeFunctionData(functionFragment: 'FEE_RATE', values?: undefined): string;
encodeFunctionData(functionFragment: 'addETHReserve', values?: undefined): string;
encodeFunctionData(functionFragment: 'addTokenReserve', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'buyTokens', values?: undefined): string;
encodeFunctionData(functionFragment: 'calculateETHForTokens', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'calculateTokensForETH', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'courseIds', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'courses', values: [string]): string;
encodeFunctionData(functionFragment: 'createCourse', values: [string, string, string, BigNumberish]): string;
encodeFunctionData(functionFragment: 'creatorEarnings', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'ethReserve', values?: undefined): string;
encodeFunctionData(functionFragment: 'getAllCourseIds', values?: undefined): string;
encodeFunctionData(functionFragment: 'getContractBalances', values?: undefined): string;
encodeFunctionData(functionFragment: 'getCourse', values: [string]): string;
encodeFunctionData(functionFragment: 'getCreatorEarnings', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getExchangeReserves', values?: undefined): string;
encodeFunctionData(functionFragment: 'getUserPurchasedCourses', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'hasUserPurchasedCourse', values: [string, AddressLike]): string;
encodeFunctionData(functionFragment: 'initializeTokenReserve', values?: undefined): string;
encodeFunctionData(functionFragment: 'mintTokenReserve', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'purchaseCourse', values: [string]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'sellTokens', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setTokenReserve', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'toggleCourseStatus', values: [string]): string;
encodeFunctionData(functionFragment: 'tokenReserve', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'updateCourse', values: [string, string, string, BigNumberish]): string;
encodeFunctionData(functionFragment: 'userCoursePurchases', values: [string, AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawETH', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdrawFees', values?: undefined): string;
encodeFunctionData(functionFragment: 'ydToken', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'DEFAULT_ETH_RESERVE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DEFAULT_TOKEN_RESERVE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'EXCHANGE_RATE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'FEE_RATE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addETHReserve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addTokenReserve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'buyTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'calculateETHForTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'calculateTokensForETH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'courseIds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'courses', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createCourse', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'creatorEarnings', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ethReserve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAllCourseIds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getContractBalances', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCourse', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCreatorEarnings', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getExchangeReserves', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserPurchasedCourses', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasUserPurchasedCourse', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'initializeTokenReserve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintTokenReserve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'purchaseCourse', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'sellTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setTokenReserve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'toggleCourseStatus', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenReserve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateCourse', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userCoursePurchases', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawETH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawFees', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ydToken', data: BytesLike): Result;
  }

  
    export namespace CourseCreatedEvent {
      export type InputTuple = [courseId: string, title: string, price: BigNumberish, creator: AddressLike];
      export type OutputTuple = [courseId: string, title: string, price: bigint, creator: string];
      export interface OutputObject {courseId: string, title: string, price: bigint, creator: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CoursePurchasedEvent {
      export type InputTuple = [courseId: string, buyer: AddressLike, price: BigNumberish];
      export type OutputTuple = [courseId: string, buyer: string, price: bigint];
      export interface OutputObject {courseId: string, buyer: string, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CourseUpdatedEvent {
      export type InputTuple = [courseId: string, title: string, description: string, price: BigNumberish];
      export type OutputTuple = [courseId: string, title: string, description: string, price: bigint];
      export interface OutputObject {courseId: string, title: string, description: string, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CreatorEarningsWithdrawnEvent {
      export type InputTuple = [creator: AddressLike, amount: BigNumberish];
      export type OutputTuple = [creator: string, amount: bigint];
      export interface OutputObject {creator: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ETHReserveAddedEvent {
      export type InputTuple = [amount: BigNumberish];
      export type OutputTuple = [amount: bigint];
      export interface OutputObject {amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FeeCollectedEvent {
      export type InputTuple = [courseId: string, buyer: AddressLike, feeAmount: BigNumberish];
      export type OutputTuple = [courseId: string, buyer: string, feeAmount: bigint];
      export interface OutputObject {courseId: string, buyer: string, feeAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ReservesInitializedEvent {
      export type InputTuple = [tokenReserve: BigNumberish, ethReserve: BigNumberish];
      export type OutputTuple = [tokenReserve: bigint, ethReserve: bigint];
      export interface OutputObject {tokenReserve: bigint, ethReserve: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenReserveAddedEvent {
      export type InputTuple = [amount: BigNumberish];
      export type OutputTuple = [amount: bigint];
      export interface OutputObject {amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokensPurchasedEvent {
      export type InputTuple = [buyer: AddressLike, ethAmount: BigNumberish, tokenAmount: BigNumberish];
      export type OutputTuple = [buyer: string, ethAmount: bigint, tokenAmount: bigint];
      export interface OutputObject {buyer: string, ethAmount: bigint, tokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokensSoldEvent {
      export type InputTuple = [seller: AddressLike, tokenAmount: BigNumberish, ethAmount: BigNumberish];
      export type OutputTuple = [seller: string, tokenAmount: bigint, ethAmount: bigint];
      export interface OutputObject {seller: string, tokenAmount: bigint, ethAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CourseManager extends BaseContract {
    
    connect(runner?: ContractRunner | null): CourseManager;
    waitForDeployment(): Promise<this>;

    interface: CourseManagerInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    DEFAULT_ETH_RESERVE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    DEFAULT_TOKEN_RESERVE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    EXCHANGE_RATE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    FEE_RATE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    addETHReserve: TypedContractMethod<
      [],
      [void],
      'payable'
    >
    

    
    addTokenReserve: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    buyTokens: TypedContractMethod<
      [],
      [void],
      'payable'
    >
    

    
    calculateETHForTokens: TypedContractMethod<
      [tokenAmount: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    calculateTokensForETH: TypedContractMethod<
      [ethAmount: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    courseIds: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    courses: TypedContractMethod<
      [arg0: string, ],
      [[string, string, string, bigint, string, boolean, bigint] & {courseId: string, title: string, description: string, price: bigint, creator: string, isActive: boolean, createdAt: bigint }],
      'view'
    >
    

    
    createCourse: TypedContractMethod<
      [courseId: string, title: string, description: string, price: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    creatorEarnings: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    ethReserve: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getAllCourseIds: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getContractBalances: TypedContractMethod<
      [],
      [[bigint, bigint] & {ethBalance: bigint, tokenBalance: bigint }],
      'view'
    >
    

    
    getCourse: TypedContractMethod<
      [courseId: string, ],
      [[string, string, bigint, string, boolean, bigint] & {title: string, description: string, price: bigint, creator: string, isActive: boolean, createdAt: bigint }],
      'view'
    >
    

    
    getCreatorEarnings: TypedContractMethod<
      [creator: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getExchangeReserves: TypedContractMethod<
      [],
      [[bigint, bigint] & {_ethReserve: bigint, _tokenReserve: bigint }],
      'view'
    >
    

    
    getUserPurchasedCourses: TypedContractMethod<
      [user: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    hasUserPurchasedCourse: TypedContractMethod<
      [courseId: string, user: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    initializeTokenReserve: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    mintTokenReserve: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    purchaseCourse: TypedContractMethod<
      [courseId: string, ],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    sellTokens: TypedContractMethod<
      [tokenAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setTokenReserve: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    toggleCourseStatus: TypedContractMethod<
      [courseId: string, ],
      [void],
      'nonpayable'
    >
    

    
    tokenReserve: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updateCourse: TypedContractMethod<
      [courseId: string, title: string, description: string, price: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    userCoursePurchases: TypedContractMethod<
      [arg0: string, arg1: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    withdrawETH: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    withdrawFees: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    ydToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'DEFAULT_ETH_RESERVE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'DEFAULT_TOKEN_RESERVE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'EXCHANGE_RATE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'FEE_RATE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'addETHReserve'): TypedContractMethod<
      [],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'addTokenReserve'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'buyTokens'): TypedContractMethod<
      [],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'calculateETHForTokens'): TypedContractMethod<
      [tokenAmount: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'calculateTokensForETH'): TypedContractMethod<
      [ethAmount: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'courseIds'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'courses'): TypedContractMethod<
      [arg0: string, ],
      [[string, string, string, bigint, string, boolean, bigint] & {courseId: string, title: string, description: string, price: bigint, creator: string, isActive: boolean, createdAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'createCourse'): TypedContractMethod<
      [courseId: string, title: string, description: string, price: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'creatorEarnings'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'ethReserve'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getAllCourseIds'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getContractBalances'): TypedContractMethod<
      [],
      [[bigint, bigint] & {ethBalance: bigint, tokenBalance: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getCourse'): TypedContractMethod<
      [courseId: string, ],
      [[string, string, bigint, string, boolean, bigint] & {title: string, description: string, price: bigint, creator: string, isActive: boolean, createdAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getCreatorEarnings'): TypedContractMethod<
      [creator: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getExchangeReserves'): TypedContractMethod<
      [],
      [[bigint, bigint] & {_ethReserve: bigint, _tokenReserve: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getUserPurchasedCourses'): TypedContractMethod<
      [user: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'hasUserPurchasedCourse'): TypedContractMethod<
      [courseId: string, user: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'initializeTokenReserve'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'mintTokenReserve'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'purchaseCourse'): TypedContractMethod<
      [courseId: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'sellTokens'): TypedContractMethod<
      [tokenAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setTokenReserve'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'toggleCourseStatus'): TypedContractMethod<
      [courseId: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'tokenReserve'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateCourse'): TypedContractMethod<
      [courseId: string, title: string, description: string, price: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'userCoursePurchases'): TypedContractMethod<
      [arg0: string, arg1: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'withdrawETH'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawFees'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'ydToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'CourseCreated'): TypedContractEvent<CourseCreatedEvent.InputTuple, CourseCreatedEvent.OutputTuple, CourseCreatedEvent.OutputObject>;
getEvent(key: 'CoursePurchased'): TypedContractEvent<CoursePurchasedEvent.InputTuple, CoursePurchasedEvent.OutputTuple, CoursePurchasedEvent.OutputObject>;
getEvent(key: 'CourseUpdated'): TypedContractEvent<CourseUpdatedEvent.InputTuple, CourseUpdatedEvent.OutputTuple, CourseUpdatedEvent.OutputObject>;
getEvent(key: 'CreatorEarningsWithdrawn'): TypedContractEvent<CreatorEarningsWithdrawnEvent.InputTuple, CreatorEarningsWithdrawnEvent.OutputTuple, CreatorEarningsWithdrawnEvent.OutputObject>;
getEvent(key: 'ETHReserveAdded'): TypedContractEvent<ETHReserveAddedEvent.InputTuple, ETHReserveAddedEvent.OutputTuple, ETHReserveAddedEvent.OutputObject>;
getEvent(key: 'FeeCollected'): TypedContractEvent<FeeCollectedEvent.InputTuple, FeeCollectedEvent.OutputTuple, FeeCollectedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'ReservesInitialized'): TypedContractEvent<ReservesInitializedEvent.InputTuple, ReservesInitializedEvent.OutputTuple, ReservesInitializedEvent.OutputObject>;
getEvent(key: 'TokenReserveAdded'): TypedContractEvent<TokenReserveAddedEvent.InputTuple, TokenReserveAddedEvent.OutputTuple, TokenReserveAddedEvent.OutputObject>;
getEvent(key: 'TokensPurchased'): TypedContractEvent<TokensPurchasedEvent.InputTuple, TokensPurchasedEvent.OutputTuple, TokensPurchasedEvent.OutputObject>;
getEvent(key: 'TokensSold'): TypedContractEvent<TokensSoldEvent.InputTuple, TokensSoldEvent.OutputTuple, TokensSoldEvent.OutputObject>;

    filters: {
      
      'CourseCreated(string,string,uint256,address)': TypedContractEvent<CourseCreatedEvent.InputTuple, CourseCreatedEvent.OutputTuple, CourseCreatedEvent.OutputObject>;
      CourseCreated: TypedContractEvent<CourseCreatedEvent.InputTuple, CourseCreatedEvent.OutputTuple, CourseCreatedEvent.OutputObject>;
    

      'CoursePurchased(string,address,uint256)': TypedContractEvent<CoursePurchasedEvent.InputTuple, CoursePurchasedEvent.OutputTuple, CoursePurchasedEvent.OutputObject>;
      CoursePurchased: TypedContractEvent<CoursePurchasedEvent.InputTuple, CoursePurchasedEvent.OutputTuple, CoursePurchasedEvent.OutputObject>;
    

      'CourseUpdated(string,string,string,uint256)': TypedContractEvent<CourseUpdatedEvent.InputTuple, CourseUpdatedEvent.OutputTuple, CourseUpdatedEvent.OutputObject>;
      CourseUpdated: TypedContractEvent<CourseUpdatedEvent.InputTuple, CourseUpdatedEvent.OutputTuple, CourseUpdatedEvent.OutputObject>;
    

      'CreatorEarningsWithdrawn(address,uint256)': TypedContractEvent<CreatorEarningsWithdrawnEvent.InputTuple, CreatorEarningsWithdrawnEvent.OutputTuple, CreatorEarningsWithdrawnEvent.OutputObject>;
      CreatorEarningsWithdrawn: TypedContractEvent<CreatorEarningsWithdrawnEvent.InputTuple, CreatorEarningsWithdrawnEvent.OutputTuple, CreatorEarningsWithdrawnEvent.OutputObject>;
    

      'ETHReserveAdded(uint256)': TypedContractEvent<ETHReserveAddedEvent.InputTuple, ETHReserveAddedEvent.OutputTuple, ETHReserveAddedEvent.OutputObject>;
      ETHReserveAdded: TypedContractEvent<ETHReserveAddedEvent.InputTuple, ETHReserveAddedEvent.OutputTuple, ETHReserveAddedEvent.OutputObject>;
    

      'FeeCollected(string,address,uint256)': TypedContractEvent<FeeCollectedEvent.InputTuple, FeeCollectedEvent.OutputTuple, FeeCollectedEvent.OutputObject>;
      FeeCollected: TypedContractEvent<FeeCollectedEvent.InputTuple, FeeCollectedEvent.OutputTuple, FeeCollectedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'ReservesInitialized(uint256,uint256)': TypedContractEvent<ReservesInitializedEvent.InputTuple, ReservesInitializedEvent.OutputTuple, ReservesInitializedEvent.OutputObject>;
      ReservesInitialized: TypedContractEvent<ReservesInitializedEvent.InputTuple, ReservesInitializedEvent.OutputTuple, ReservesInitializedEvent.OutputObject>;
    

      'TokenReserveAdded(uint256)': TypedContractEvent<TokenReserveAddedEvent.InputTuple, TokenReserveAddedEvent.OutputTuple, TokenReserveAddedEvent.OutputObject>;
      TokenReserveAdded: TypedContractEvent<TokenReserveAddedEvent.InputTuple, TokenReserveAddedEvent.OutputTuple, TokenReserveAddedEvent.OutputObject>;
    

      'TokensPurchased(address,uint256,uint256)': TypedContractEvent<TokensPurchasedEvent.InputTuple, TokensPurchasedEvent.OutputTuple, TokensPurchasedEvent.OutputObject>;
      TokensPurchased: TypedContractEvent<TokensPurchasedEvent.InputTuple, TokensPurchasedEvent.OutputTuple, TokensPurchasedEvent.OutputObject>;
    

      'TokensSold(address,uint256,uint256)': TypedContractEvent<TokensSoldEvent.InputTuple, TokensSoldEvent.OutputTuple, TokensSoldEvent.OutputObject>;
      TokensSold: TypedContractEvent<TokensSoldEvent.InputTuple, TokensSoldEvent.OutputTuple, TokensSoldEvent.OutputObject>;
    
    };
  }