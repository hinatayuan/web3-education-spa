/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'CourseManager', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.CourseManager__factory>
getContractFactory(name: 'IAToken', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IAToken__factory>
getContractFactory(name: 'IPool', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IPool__factory>
getContractFactory(name: 'IPoolAddressesProvider', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IPoolAddressesProvider__factory>
getContractFactory(name: 'IPoolDataProvider', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IPoolDataProvider__factory>
getContractFactory(name: 'IQuoter', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IQuoter__factory>
getContractFactory(name: 'ISwapRouter', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ISwapRouter__factory>
getContractFactory(name: 'StakingSystem', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.StakingSystem__factory>
getContractFactory(name: 'YDToken', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.YDToken__factory>

  getContractAt(name: 'CourseManager', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.CourseManager>
getContractAt(name: 'IAToken', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IAToken>
getContractAt(name: 'IPool', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IPool>
getContractAt(name: 'IPoolAddressesProvider', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IPoolAddressesProvider>
getContractAt(name: 'IPoolDataProvider', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IPoolDataProvider>
getContractAt(name: 'IQuoter', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IQuoter>
getContractAt(name: 'ISwapRouter', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ISwapRouter>
getContractAt(name: 'StakingSystem', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.StakingSystem>
getContractAt(name: 'YDToken', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.YDToken>

  deployContract(name: 'CourseManager', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CourseManager>
deployContract(name: 'IAToken', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IAToken>
deployContract(name: 'IPool', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPool>
deployContract(name: 'IPoolAddressesProvider', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPoolAddressesProvider>
deployContract(name: 'IPoolDataProvider', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPoolDataProvider>
deployContract(name: 'IQuoter', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IQuoter>
deployContract(name: 'ISwapRouter', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ISwapRouter>
deployContract(name: 'StakingSystem', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.StakingSystem>
deployContract(name: 'YDToken', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.YDToken>

  deployContract(name: 'CourseManager', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CourseManager>
deployContract(name: 'IAToken', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IAToken>
deployContract(name: 'IPool', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPool>
deployContract(name: 'IPoolAddressesProvider', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPoolAddressesProvider>
deployContract(name: 'IPoolDataProvider', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPoolDataProvider>
deployContract(name: 'IQuoter', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IQuoter>
deployContract(name: 'ISwapRouter', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ISwapRouter>
deployContract(name: 'StakingSystem', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.StakingSystem>
deployContract(name: 'YDToken', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.YDToken>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  