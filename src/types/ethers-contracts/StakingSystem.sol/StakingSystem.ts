/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common"
  

  export interface StakingSystemInterface extends Interface {
    getFunction(nameOrSignature: "AAVE_DATA_PROVIDER" | "AAVE_POOL_PROVIDER" | "LINK_TOKEN" | "USDT_TOKEN" | "aLinkToken" | "aUsdtToken" | "aavePool" | "claimLinkRewards" | "claimRewards" | "emergencyWithdraw" | "getLinkSystemStats" | "getSystemStats" | "getUserInfo" | "getUserLinkInfo" | "owner" | "pause" | "paused" | "renounceOwnership" | "stake" | "stakeLINK" | "totalLinkRewardsPaid" | "totalLinkStaked" | "totalRewardsPaid" | "totalStaked" | "transferOwnership" | "unpause" | "userInfo" | "userLinkInfo" | "withdraw" | "withdrawLINK"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "LinkRewardsClaimed" | "LinkStaked" | "LinkWithdrawn" | "OwnershipTransferred" | "Paused" | "RewardsClaimed" | "Staked" | "Unpaused" | "Withdrawn"): EventFragment;

    encodeFunctionData(functionFragment: 'AAVE_DATA_PROVIDER', values?: undefined): string;
encodeFunctionData(functionFragment: 'AAVE_POOL_PROVIDER', values?: undefined): string;
encodeFunctionData(functionFragment: 'LINK_TOKEN', values?: undefined): string;
encodeFunctionData(functionFragment: 'USDT_TOKEN', values?: undefined): string;
encodeFunctionData(functionFragment: 'aLinkToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'aUsdtToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'aavePool', values?: undefined): string;
encodeFunctionData(functionFragment: 'claimLinkRewards', values?: undefined): string;
encodeFunctionData(functionFragment: 'claimRewards', values?: undefined): string;
encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getLinkSystemStats', values?: undefined): string;
encodeFunctionData(functionFragment: 'getSystemStats', values?: undefined): string;
encodeFunctionData(functionFragment: 'getUserInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getUserLinkInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'stake', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'stakeLINK', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'totalLinkRewardsPaid', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalLinkStaked', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalRewardsPaid', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalStaked', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
encodeFunctionData(functionFragment: 'userInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'userLinkInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdrawLINK', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'AAVE_DATA_PROVIDER', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'AAVE_POOL_PROVIDER', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'LINK_TOKEN', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'USDT_TOKEN', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'aLinkToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'aUsdtToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'aavePool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimLinkRewards', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getLinkSystemStats', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getSystemStats', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserLinkInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'stakeLINK', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalLinkRewardsPaid', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalLinkStaked', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalRewardsPaid', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalStaked', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userLinkInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawLINK', data: BytesLike): Result;
  }

  
    export namespace LinkRewardsClaimedEvent {
      export type InputTuple = [user: AddressLike, rewardAmount: BigNumberish];
      export type OutputTuple = [user: string, rewardAmount: bigint];
      export interface OutputObject {user: string, rewardAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LinkStakedEvent {
      export type InputTuple = [user: AddressLike, linkAmount: BigNumberish, aTokenAmount: BigNumberish];
      export type OutputTuple = [user: string, linkAmount: bigint, aTokenAmount: bigint];
      export interface OutputObject {user: string, linkAmount: bigint, aTokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LinkWithdrawnEvent {
      export type InputTuple = [user: AddressLike, linkAmount: BigNumberish, aTokenBurned: BigNumberish];
      export type OutputTuple = [user: string, linkAmount: bigint, aTokenBurned: bigint];
      export interface OutputObject {user: string, linkAmount: bigint, aTokenBurned: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardsClaimedEvent {
      export type InputTuple = [user: AddressLike, rewardAmount: BigNumberish];
      export type OutputTuple = [user: string, rewardAmount: bigint];
      export interface OutputObject {user: string, rewardAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace StakedEvent {
      export type InputTuple = [user: AddressLike, usdtAmount: BigNumberish, aTokenAmount: BigNumberish];
      export type OutputTuple = [user: string, usdtAmount: bigint, aTokenAmount: bigint];
      export interface OutputObject {user: string, usdtAmount: bigint, aTokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnpausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawnEvent {
      export type InputTuple = [user: AddressLike, usdtAmount: BigNumberish, aTokenBurned: BigNumberish];
      export type OutputTuple = [user: string, usdtAmount: bigint, aTokenBurned: bigint];
      export interface OutputObject {user: string, usdtAmount: bigint, aTokenBurned: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface StakingSystem extends BaseContract {
    
    connect(runner?: ContractRunner | null): StakingSystem;
    waitForDeployment(): Promise<this>;

    interface: StakingSystemInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    AAVE_DATA_PROVIDER: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    AAVE_POOL_PROVIDER: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    LINK_TOKEN: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    USDT_TOKEN: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    aLinkToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    aUsdtToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    aavePool: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    claimLinkRewards: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    claimRewards: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    emergencyWithdraw: TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getLinkSystemStats: TypedContractMethod<
      [],
      [[bigint, bigint, bigint, bigint, bigint] & {_totalLinkStaked: bigint, _totalLinkRewardsPaid: bigint, _totalLinkATokens: bigint, _availableLinkRewards: bigint, _currentLinkAPY: bigint }],
      'view'
    >
    

    
    getSystemStats: TypedContractMethod<
      [],
      [[bigint, bigint, bigint, bigint, bigint] & {_totalStaked: bigint, _totalRewardsPaid: bigint, _totalATokens: bigint, _availableRewards: bigint, _currentAPY: bigint }],
      'view'
    >
    

    
    getUserInfo: TypedContractMethod<
      [user: AddressLike, ],
      [[bigint, bigint, bigint, bigint, bigint, bigint] & {stakedAmount: bigint, aTokenBalance: bigint, lastStakeTime: bigint, totalRewardsClaimed: bigint, availableRewards: bigint, currentValue: bigint }],
      'view'
    >
    

    
    getUserLinkInfo: TypedContractMethod<
      [user: AddressLike, ],
      [[bigint, bigint, bigint, bigint, bigint, bigint] & {stakedAmount: bigint, aTokenBalance: bigint, lastStakeTime: bigint, totalRewardsClaimed: bigint, availableRewards: bigint, currentValue: bigint }],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    pause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    stake: TypedContractMethod<
      [usdtAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    stakeLINK: TypedContractMethod<
      [linkAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    totalLinkRewardsPaid: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalLinkStaked: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalRewardsPaid: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalStaked: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    unpause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    userInfo: TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint, bigint, bigint] & {stakedAmount: bigint, aTokenBalance: bigint, lastStakeTime: bigint, totalRewardsClaimed: bigint }],
      'view'
    >
    

    
    userLinkInfo: TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint, bigint, bigint] & {stakedAmount: bigint, aTokenBalance: bigint, lastStakeTime: bigint, totalRewardsClaimed: bigint }],
      'view'
    >
    

    
    withdraw: TypedContractMethod<
      [usdtAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawLINK: TypedContractMethod<
      [linkAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'AAVE_DATA_PROVIDER'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'AAVE_POOL_PROVIDER'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'LINK_TOKEN'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'USDT_TOKEN'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'aLinkToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'aUsdtToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'aavePool'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'claimLinkRewards'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'claimRewards'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'emergencyWithdraw'): TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getLinkSystemStats'): TypedContractMethod<
      [],
      [[bigint, bigint, bigint, bigint, bigint] & {_totalLinkStaked: bigint, _totalLinkRewardsPaid: bigint, _totalLinkATokens: bigint, _availableLinkRewards: bigint, _currentLinkAPY: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getSystemStats'): TypedContractMethod<
      [],
      [[bigint, bigint, bigint, bigint, bigint] & {_totalStaked: bigint, _totalRewardsPaid: bigint, _totalATokens: bigint, _availableRewards: bigint, _currentAPY: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getUserInfo'): TypedContractMethod<
      [user: AddressLike, ],
      [[bigint, bigint, bigint, bigint, bigint, bigint] & {stakedAmount: bigint, aTokenBalance: bigint, lastStakeTime: bigint, totalRewardsClaimed: bigint, availableRewards: bigint, currentValue: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getUserLinkInfo'): TypedContractMethod<
      [user: AddressLike, ],
      [[bigint, bigint, bigint, bigint, bigint, bigint] & {stakedAmount: bigint, aTokenBalance: bigint, lastStakeTime: bigint, totalRewardsClaimed: bigint, availableRewards: bigint, currentValue: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'pause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'stake'): TypedContractMethod<
      [usdtAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'stakeLINK'): TypedContractMethod<
      [linkAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'totalLinkRewardsPaid'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalLinkStaked'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalRewardsPaid'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalStaked'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unpause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'userInfo'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint, bigint, bigint] & {stakedAmount: bigint, aTokenBalance: bigint, lastStakeTime: bigint, totalRewardsClaimed: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'userLinkInfo'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint, bigint, bigint] & {stakedAmount: bigint, aTokenBalance: bigint, lastStakeTime: bigint, totalRewardsClaimed: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [usdtAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawLINK'): TypedContractMethod<
      [linkAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'LinkRewardsClaimed'): TypedContractEvent<LinkRewardsClaimedEvent.InputTuple, LinkRewardsClaimedEvent.OutputTuple, LinkRewardsClaimedEvent.OutputObject>;
getEvent(key: 'LinkStaked'): TypedContractEvent<LinkStakedEvent.InputTuple, LinkStakedEvent.OutputTuple, LinkStakedEvent.OutputObject>;
getEvent(key: 'LinkWithdrawn'): TypedContractEvent<LinkWithdrawnEvent.InputTuple, LinkWithdrawnEvent.OutputTuple, LinkWithdrawnEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Paused'): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
getEvent(key: 'RewardsClaimed'): TypedContractEvent<RewardsClaimedEvent.InputTuple, RewardsClaimedEvent.OutputTuple, RewardsClaimedEvent.OutputObject>;
getEvent(key: 'Staked'): TypedContractEvent<StakedEvent.InputTuple, StakedEvent.OutputTuple, StakedEvent.OutputObject>;
getEvent(key: 'Unpaused'): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
getEvent(key: 'Withdrawn'): TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;

    filters: {
      
      'LinkRewardsClaimed(address,uint256)': TypedContractEvent<LinkRewardsClaimedEvent.InputTuple, LinkRewardsClaimedEvent.OutputTuple, LinkRewardsClaimedEvent.OutputObject>;
      LinkRewardsClaimed: TypedContractEvent<LinkRewardsClaimedEvent.InputTuple, LinkRewardsClaimedEvent.OutputTuple, LinkRewardsClaimedEvent.OutputObject>;
    

      'LinkStaked(address,uint256,uint256)': TypedContractEvent<LinkStakedEvent.InputTuple, LinkStakedEvent.OutputTuple, LinkStakedEvent.OutputObject>;
      LinkStaked: TypedContractEvent<LinkStakedEvent.InputTuple, LinkStakedEvent.OutputTuple, LinkStakedEvent.OutputObject>;
    

      'LinkWithdrawn(address,uint256,uint256)': TypedContractEvent<LinkWithdrawnEvent.InputTuple, LinkWithdrawnEvent.OutputTuple, LinkWithdrawnEvent.OutputObject>;
      LinkWithdrawn: TypedContractEvent<LinkWithdrawnEvent.InputTuple, LinkWithdrawnEvent.OutputTuple, LinkWithdrawnEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
      Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    

      'RewardsClaimed(address,uint256)': TypedContractEvent<RewardsClaimedEvent.InputTuple, RewardsClaimedEvent.OutputTuple, RewardsClaimedEvent.OutputObject>;
      RewardsClaimed: TypedContractEvent<RewardsClaimedEvent.InputTuple, RewardsClaimedEvent.OutputTuple, RewardsClaimedEvent.OutputObject>;
    

      'Staked(address,uint256,uint256)': TypedContractEvent<StakedEvent.InputTuple, StakedEvent.OutputTuple, StakedEvent.OutputObject>;
      Staked: TypedContractEvent<StakedEvent.InputTuple, StakedEvent.OutputTuple, StakedEvent.OutputObject>;
    

      'Unpaused(address)': TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
      Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    

      'Withdrawn(address,uint256,uint256)': TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
      Withdrawn: TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
    
    };
  }